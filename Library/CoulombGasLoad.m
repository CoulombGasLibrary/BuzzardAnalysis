% This script calculates the NN and NNN spacings and save them in a
% separate file. This is done to allow faster fitting with the distances.
% Choose the same parameters as the file "CoulombGasSim.m" to load the data
% for the Coulomb gas.

clear;

% The number of particles.
N = 200;

% The number of configurations.
Nconf = 1e4;

% The number of iterations.
Nsteps = 1e2;

% Step size.
ep = N^(-1/3);

% Plot histograms of the distances while calculating them
PlotThings = true;

% Initialise figure if plotting
if PlotThings == true
    figure();
    LegendCell = {};
    hold on % This allows several plots in the same figure.
end

% For the sake of the plotting colour, picking a maximum, minimu, and
% step-size for \beta is simpler than a list.
BetMin = 0.0;
BetMax = 2.0;
BetStep = 0.1;

% Loop through the values of \beta
for betaNum = fliplr(BetMin:BetStep:BetMax)

    
    % Show when the program started calculating this value of \beta.
    disp(['Looking at \beta=',num2str(betaNum)])
    disp(datetime('now'))
    
    if PlotThings == true
        % Choose a colour for plotting
        ColorVec = [ max(1 - (betaNum - BetMin) / (BetMax - BetMin) ,0) , 0 ,...
            max((betaNum - BetMin) / (BetMax - BetMin) ,0)];
    end
    
    % Name of file to be loaded and saved.
    TEXT = ['Coulomb_N',num2str(N),'_Nsteps',num2str(Nsteps),...
            '_Nconf',num2str(Nconf),'_beta',num2str(betaNum),'_ep',num2str(ep)];
    
    % Import positions from file generated by CoulomGasSim.m    
    eigenvalues = importdata(['data/',TEXT,'_eigR.txt'])+1i*importdata(['data/',TEXT,'_eigI.txt']);    
    
    % Prelocate for NN and NNN of all realisations.
    DistMat = ones(size(eigenvalues))*NaN; % Nearest
    DistNextMat = ones(size(eigenvalues))*NaN; % Next-to-Nearest
    
    parfor iTrials = 1:Nconf
        
        % Calculate distances. This is not an optimal method to find
        % the minimum distances, as this method just calculates all
        % distances in a matrix and finds the minimum.
        PosFull = [real(eigenvalues(:,iTrials)) , imag(eigenvalues(:,iTrials))];
        Distances = sqrt(abs((repmat(PosFull(:,1),1,length(PosFull(:,1)))-repmat(PosFull(:,1)',length(PosFull(:,1)),1)).^2 ...
          + (repmat(PosFull(:,2),1,length(PosFull(:,2)))-repmat(PosFull(:,2)',length(PosFull(:,2)),1)).^2));
        
        % Prelocate for NN and NNN of individual realisation
        MinDist = NaN * ones(N,1); % Nearest
        NextMinDist = NaN * ones(N,1); % Next-to-nearest
        for iMin = 1:N
            % Look only at the distances not to itself.
            DistTemp =  Distances([1:(iMin-1),(iMin+1):N],iMin);
            
            MinDist(iMin) = min(DistTemp);% Nearest
            MinSecDistTemp = mink(DistTemp,2); % Next-to-nearest
            NextMinDist(iMin) = MinSecDistTemp(2); % This construction is simply because of the way mink() works.
        end
        
        % Sort and rescale such that first moment of NN-spacing is 1.
        Scale = mean(MinDist);

        MinDist = sort(MinDist)/Scale;
        NextMinDist = sort(NextMinDist)/Scale;
        
        % Save the distances in the matrices
        DistMat(:,iTrials) = MinDist;
        DistNextMat(:,iTrials) = NextMinDist;
        
    end
    
    % Save the distances
    csvwrite(strcat('data/',TEXT,'_dists.txt'),DistMat);
    csvwrite(strcat('data/',TEXT,'_NextDists.txt'),DistNextMat);
    
    % Plot the distances in a histogram and save these histograms for use
    % in other programs.
    if PlotThings == true
        
        [Counts,Edges] = histcounts(DistMat(:),100,'Normalization','pdf');

        x = Edges(1:end-1)+diff(Edges)/2;
        y = Counts;

        csvwrite(strcat('data/',TEXT,'_NearestNeighbour_Plot.txt'),[x;y]);
        
        plot(x,y,'LineWidth',1,'Color',ColorVec)


        [Counts,Edges] = histcounts(DistNextMat(:),100,'Normalization','pdf');

        x = Edges(1:end-1)+diff(Edges)/2;
        y = Counts;
        
        
        csvwrite(strcat('data/',TEXT,'_NextToNearestNeighbour_Plot.txt'),[x;y]);

        plot(x,y,'LineWidth',1,'Color',ColorVec)

        % Legends for figure
        LegendCell{end+1} = ['\beta = ',num2str(betaNum)];

    end

end

% Make figure nice-looking and add legend.
if PlotThings == true
    hold off
    grid on
    box on
    lgd = legend(LegendCell,'Location','northeast');
    axis([0 2.5 0 1.8])
    set(gca,'FontSize',20)
    axis square
end
